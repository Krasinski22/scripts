### RESUMO BÁSICO DO `systemd`

`systemd` é o **init system** padrão na maioria das distros Linux modernas. Ele gerencia **serviços**, **sockets**, **montagens**, **targets**, etc. O mais comum para iniciantes é criar e gerenciar **serviços (units)**.

---

## 1. **UNIT FILES**

### Local padrão:

```
/etc/systemd/system/   ← serviços customizados (recomendado para os seus)
/lib/systemd/system/   ← serviços do sistema (evite mexer)
/run/systemd/system/   ← runtime, temporários
```

### Formato:

Arquivos `.service`, `.socket`, `.target`, etc.

---

## 2. **EXEMPLO BÁSICO: CRIAR UM SERVIÇO**

Suponha que você quer rodar um script `~/scripts/backup.sh` como serviço.

### Etapa 1: Dê permissão de execução

```bash
chmod +x ~/scripts/backup.sh
```

### Etapa 2: Crie o unit file

```bash
sudo nano /etc/systemd/system/backup.service
```

### Conteúdo:

```ini
[Unit]
Description=Backup pessoal
After=network.target

[Service]
ExecStart=/home/SEU_USUARIO/scripts/backup.sh
Restart=on-failure
User=SEU_USUARIO

[Install]
WantedBy=multi-user.target
```

**Notas:**

* `User=` → indica o usuário que executará o script.
* `Restart=on-failure` → reinicia se falhar.
* `WantedBy=multi-user.target` → ativa junto ao boot padrão.

---

## 3. **COMANDOS ÚTEIS DO SYSTEMD**

| Ação                     | Comando                                 |
| ------------------------ | --------------------------------------- |
| Iniciar serviço agora    | `sudo systemctl start backup.service`   |
| Parar serviço            | `sudo systemctl stop backup.service`    |
| Ver status               | `systemctl status backup.service`       |
| Ativar no boot           | `sudo systemctl enable backup.service`  |
| Desativar no boot        | `sudo systemctl disable backup.service` |
| Ver logs                 | `journalctl -u backup.service`          |
| Recarregar unidades      | `sudo systemctl daemon-reexec`          |
| Recarregar configurações | `sudo systemctl daemon-reload`          |

---

## 4. **DICAS**

* Sempre rode `daemon-reload` após editar ou criar serviços.
* Se usar variáveis de ambiente, defina com `Environment=` ou via arquivo `.env`.
* Evite usar `~` em caminhos; use caminhos absolutos.

---

Se quiser algo mais complexo (timer, socket, target), posso te mostrar depois. Quer isso também?

